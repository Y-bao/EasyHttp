{"version":3,"file":"index.js","sources":["../src/odl/odl.js","dev.js"],"sourcesContent":["//正则表达式-指令匹配\r\nconst REG = /(?:{([^{}]*))?{\\s*([a-z_][a-z0-9_]*)\\s*((?::[a-z_][a-z0-9_]*)*)\\s*}(?:([^{}]*)})?/gi;\r\n//结点类型\r\nexport const NODE_TYPE = {\r\n    TEXT: \"text\",\r\n    CMD: \"cmd\"\r\n};\r\nconst pri = Symbol(\"privateScope\");\r\n//节点树\r\nclass ODLConstructor {\r\n    constructor(requestTpl) {\r\n        this[pri] = {};\r\n        let tpl = requestTpl;\r\n        if (!tpl) {\r\n            return;\r\n        }\r\n        let nodes = (this[pri].nodes = []);\r\n        let keys;\r\n        let lastIndex = 0;\r\n        let result;\r\n        while ((result = REG.exec(tpl))) {\r\n            keys || (keys = this[pri].keys = []);\r\n            let index = result[\"index\"];\r\n            if (lastIndex < index) {\r\n                nodes.push({\r\n                    type: NODE_TYPE.TEXT,\r\n                    data: tpl.substring(lastIndex, index)\r\n                });\r\n            }\r\n            let dictates = undefined;\r\n            let cmdStr = result[3];\r\n            if (cmdStr) {\r\n                let cmds = cmdStr.split(\":\");\r\n                for (let i = 0, n = cmds.length; i < n; i++) {\r\n                    let e = cmds[i];\r\n                    if (e) {\r\n                        (dictates || (dictates = [])).push(e);\r\n                    }\r\n                }\r\n            }\r\n            let key = result[2];\r\n            nodes.push({\r\n                type: NODE_TYPE.CMD,\r\n                data: {\r\n                    key: key,\r\n                    dictates: dictates || undefined,\r\n                    prefix: result[1] || undefined,\r\n                    suffix: result[4] || undefined\r\n                }\r\n            });\r\n            keys[key] = 1;\r\n            lastIndex = index + result[0].length;\r\n        }\r\n        let length = tpl.length;\r\n        if (lastIndex < length) {\r\n            nodes.push({\r\n                type: NODE_TYPE.TEXT,\r\n                data: tpl.substring(lastIndex, length)\r\n            });\r\n        }\r\n    }\r\n\r\n    get nodes() {\r\n        return this[pri].nodes;\r\n    }\r\n    get keys() {\r\n        return this[pri].keys;\r\n    }\r\n    //转为请求模板\r\n    toRequestTpl() {\r\n        if (!this.nodes) {\r\n            return \"\";\r\n        }\r\n        let tpl = \"\";\r\n        for (let i = 0, n = this.nodes.length; i < n; i++) {\r\n            let node = this.nodes[i];\r\n            let cmdStr = \"\";\r\n            switch (node.type) {\r\n                case NODE_TYPE.CMD:\r\n                    cmdStr = node.data.key;\r\n                    if (node.data.dictates) {\r\n                        cmdStr = `${cmdStr}:${node.data.dictates.join(\":\")}`;\r\n                    }\r\n                    cmdStr = `{${cmdStr}}`;\r\n                    if (node.data.prefix || node.data.suffix) {\r\n                        cmdStr = `{${node.data.prefix || \"\"}${cmdStr}${node.data.suffix || \"\"}}`;\r\n                    }\r\n                    break;\r\n                case NODE_TYPE.TEXT:\r\n                default:\r\n                    cmdStr = node.data;\r\n            }\r\n            tpl = tpl + cmdStr;\r\n        }\r\n        return tpl;\r\n    }\r\n}\r\nconst ODL = ODLConstructor;\r\nexport default ODL;\r\n","import ODL, { NODE_TYPE } from \"../src/odl/odl\";\r\n\r\nlet odl = new ODL(\"ggggggggg?gg={fdsf:gdfg}&nn=hgfh{&tt={jhgj:erwe}}\");\r\nconsole.log(odl.nodes);\r\nconsole.log(odl.keys);\r\n"],"names":["REG","NODE_TYPE","TEXT","CMD","pri","Symbol","ODLConstructor","constructor","requestTpl","tpl","nodes","keys","lastIndex","result","exec","index","push","type","data","substring","dictates","undefined","cmdStr","cmds","split","i","n","length","e","key","prefix","suffix","toRequestTpl","node","join","ODL","odl","console","log"],"mappings":"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"}